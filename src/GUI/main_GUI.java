/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Code.*;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Lasindu Ruwin
 */
public class main_GUI extends javax.swing.JFrame {

    /**
     * Creates new form main_GUI
     */
     public String a;
  
     DatabaseCon dbcon = new DatabaseCon();
     
     
     
    public main_GUI() {
        initComponents();        
        
                  
    }
    public main_GUI(String userrole) {
        initComponents();        
        // Checking for user roles and granting access to the features of the main UI ;
        this.a = userrole;
        lblrole.setText(a);
        AccessControlls(a);
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd");  
        LocalDateTime now = LocalDateTime.now();
        String day = dtf.format(now);
        String checkdate = "30";
        if(day.equals(checkdate))
        {            
            
            MonthReset();                           
         
        }
        else
        {
            chkupdate();
        }
        
                  
    }
    private void chkupdate()
    {
         try {
             String sql = "UPDATE `resetcheck` SET `Rcheck`=0";
             PreparedStatement ps;
             ps = dbcon.Database_connection().prepareStatement(sql);
             ps.execute();
         } catch (SQLException ex) {
             Logger.getLogger(main_GUI.class.getName()).log(Level.SEVERE, null, ex);
         }
    }
    private void MonthReset()
    {
         try {
             PreparedStatement ps;
             ResultSet rs;
             int chk = 0;
             String sql = "UPDATE `employee` SET`OT_hrs`=0,`leave_hrs`=0,`Paied_advances`=0,`Leaves_amount`=`Leaves_per_month`";
             String sql2 = "SELECT * FROM `resetcheck`";
             String sql3 = "UPDATE `resetcheck` SET `Rcheck`=1";
             ps = dbcon.Database_connection().prepareStatement(sql2);
             rs = ps.executeQuery();
             if(rs.next())
             {
                 chk=rs.getInt("Rcheck");                 
             }
             if (chk == 0)
             {
                  ps = dbcon.Database_connection().prepareStatement(sql);
                  ps.execute();
                  ps = dbcon.Database_connection().prepareStatement(sql3);
                  ps.execute();
                  
             }
             
            
         } catch (SQLException ex) {
             Logger.getLogger(main_GUI.class.getName()).log(Level.SEVERE, null, ex);
         }
    }
    
    private void AccessControlls(String role)
    {
        if(role.equalsIgnoreCase("Admin"))
        {
            AdminPannelButton.setEnabled(true);
            RemoveSuppbtn.setEnabled(true);
            
        }
        else
        {
            AdminPannelButton.setEnabled(false);
            RemoveSuppbtn.setEnabled(false);
            btnDopayment.setEnabled(false);
            btnremove_employee.setEnabled(false);
            jTabbedPane1.setEnabledAt(1, false);
            jTabbedPane1.setEnabledAt(5, false);
        }
    }
  
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtSitemID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtSQuantity = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtEarnings = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        txtSstallID = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        txtrevStallID = new javax.swing.JTextField();
        jButton17 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel45 = new javax.swing.JLabel();
        txtSStockID = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TBLDaySal = new javax.swing.JTable();
        jButton14 = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        lbltotalIIncome = new javax.swing.JLabel();
        lblProfit = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TBLmonthsales = new javax.swing.JTable();
        jButton15 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jTabbedPaneInventory = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtitemID = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtItemName = new javax.swing.JTextField();
        txtquantity = new javax.swing.JTextField();
        txtprice = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtSupID = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        txtCostperitem = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        txtstockID = new javax.swing.JTextField();
        jButton21 = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtdelitem = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        txtdelq = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        txtdelstock = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        txtSuppID = new javax.swing.JTextField();
        txtSuppName = new javax.swing.JTextField();
        jButton25 = new javax.swing.JButton();
        jButton26 = new javax.swing.JButton();
        jLabel38 = new javax.swing.JLabel();
        txtdelsup = new javax.swing.JTextField();
        RemoveSuppbtn = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        txtCategory = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        txtitemSearch = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        TBLItem_table = new javax.swing.JTable();
        jButton7 = new javax.swing.JButton();
        jButton30 = new javax.swing.JButton();
        jPanel19 = new javax.swing.JPanel();
        btnDopayment = new javax.swing.JButton();
        jLabel40 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        txtsupamt = new javax.swing.JTextField();
        txtsupIDpay = new javax.swing.JTextField();
        jScrollPane8 = new javax.swing.JScrollPane();
        TBLviewSupp = new javax.swing.JTable();
        jPanel15 = new javax.swing.JPanel();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel17 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        txtempID = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        txtempName = new javax.swing.JTextField();
        txtempContact = new javax.swing.JTextField();
        txtempAddress = new javax.swing.JTextField();
        jButton18 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();
        jLabel32 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel19 = new javax.swing.JLabel();
        txtdelempID = new javax.swing.JTextField();
        btnremove_employee = new javax.swing.JButton();
        jLabel27 = new javax.swing.JLabel();
        txtempSal = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        txtempupID = new javax.swing.JTextField();
        ComboBoxEmpUp = new javax.swing.JComboBox<>();
        txtempUpVal = new javax.swing.JTextField();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        txtempAID = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        txtAamt = new javax.swing.JTextField();
        txtempOTR = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        txtempLeaveR = new javax.swing.JTextField();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel49 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JSeparator();
        jLabel52 = new javax.swing.JLabel();
        jButton29 = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        txtempLeavsAmt = new javax.swing.JTextField();
        jPanel20 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        TBLEMP = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtempOTID = new javax.swing.JTextField();
        txtOTHrs = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jButton10 = new javax.swing.JButton();
        txtempLeaveID = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtNumofDays = new javax.swing.JTextField();
        jPanel18 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TBLSalary = new javax.swing.JTable();
        jButton11 = new javax.swing.JButton();
        jButton28 = new javax.swing.JButton();
        jButton31 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        txtStallID = new javax.swing.JTextField();
        txtStallName = new javax.swing.JTextField();
        jButton22 = new javax.swing.JButton();
        jButton23 = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        TBLSubstall = new javax.swing.JTable();
        jButton24 = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jButton12 = new javax.swing.JButton();
        AdminPannelButton = new javax.swing.JButton();
        lblrole = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel5.setBackground(new java.awt.Color(153, 153, 153));

        jTabbedPane1.setBackground(new java.awt.Color(0, 255, 255));
        jTabbedPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTabbedPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel1.setText("Item ID :");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(17, 63, 70, 14);

        txtSitemID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSitemIDActionPerformed(evt);
            }
        });
        jPanel1.add(txtSitemID);
        txtSitemID.setBounds(109, 50, 187, 30);

        jLabel2.setText("Quantity :");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(17, 107, 70, 14);
        jPanel1.add(txtSQuantity);
        txtSQuantity.setBounds(109, 94, 187, 30);

        jButton1.setText("Add Item");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(370, 70, 100, 23);

        jButton2.setText("Clear");
        jPanel1.add(jButton2);
        jButton2.setBounds(370, 150, 100, 23);

        jLabel4.setText("End of the day Revenue :");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(20, 370, 140, 14);
        jPanel1.add(txtEarnings);
        txtEarnings.setBounds(170, 370, 281, 30);

        jLabel23.setText("SubStall ID:");
        jPanel1.add(jLabel23);
        jLabel23.setBounds(20, 150, 80, 14);
        jPanel1.add(txtSstallID);
        txtSstallID.setBounds(110, 140, 187, 30);

        jLabel24.setText("SubStall ID:");
        jPanel1.add(jLabel24);
        jLabel24.setBounds(20, 440, 120, 14);
        jPanel1.add(txtrevStallID);
        txtrevStallID.setBounds(170, 430, 281, 30);

        jButton17.setText("Add");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton17);
        jButton17.setBounds(500, 400, 110, 23);

        jSeparator2.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator2.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.add(jSeparator2);
        jSeparator2.setBounds(0, 320, 1150, 20);

        jLabel45.setText("Stock ID :");
        jPanel1.add(jLabel45);
        jLabel45.setBounds(20, 200, 80, 14);
        jPanel1.add(txtSStockID);
        txtSStockID.setBounds(110, 190, 187, 30);

        jTabbedPane1.addTab("Sales Records", jPanel1);

        jPanel2.setBackground(new java.awt.Color(153, 153, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTabbedPane3.setBackground(new java.awt.Color(51, 255, 255));

        jPanel12.setBackground(new java.awt.Color(153, 153, 153));
        jPanel12.setLayout(null);

        TBLDaySal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Sub Stall", "Cost", "Expected income", "Date"
            }
        ));
        TBLDaySal.setRowHeight(25);
        jScrollPane3.setViewportView(TBLDaySal);

        jPanel12.add(jScrollPane3);
        jScrollPane3.setBounds(10, 11, 1130, 227);

        jButton14.setText("Show in the Table");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton14);
        jButton14.setBounds(30, 490, 140, 23);

        jLabel25.setFont(new java.awt.Font("Calisto MT", 1, 18)); // NOI18N
        jLabel25.setText("Profit :");
        jPanel12.add(jLabel25);
        jLabel25.setBounds(192, 325, 167, 22);

        jLabel26.setFont(new java.awt.Font("Calisto MT", 1, 18)); // NOI18N
        jLabel26.setText("Revenue :");
        jPanel12.add(jLabel26);
        jLabel26.setBounds(192, 275, 167, 22);

        lbltotalIIncome.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel12.add(lbltotalIIncome);
        lbltotalIIncome.setBounds(340, 270, 250, 30);

        lblProfit.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel12.add(lblProfit);
        lblProfit.setBounds(340, 320, 270, 20);

        jButton9.setText("Generate a report");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton9);
        jButton9.setBounds(290, 490, 180, 23);

        jTabbedPane3.addTab("View today's report", jPanel12);

        jPanel13.setBackground(new java.awt.Color(153, 153, 153));
        jPanel13.setLayout(null);

        TBLmonthsales.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "total expected revenue", "total revenue ", "total profit"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(TBLmonthsales);

        jPanel13.add(jScrollPane4);
        jScrollPane4.setBounds(10, 11, 1130, 290);

        jButton15.setText("Show In the table");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });
        jPanel13.add(jButton15);
        jButton15.setBounds(30, 490, 140, 23);

        jButton13.setText("Generate Report");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        jPanel13.add(jButton13);
        jButton13.setBounds(300, 490, 180, 23);

        jTabbedPane3.addTab("View this Month's Report", jPanel13);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3)
        );

        jTabbedPane1.addTab("Sales Report", jPanel2);

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTabbedPaneInventory.setBackground(new java.awt.Color(153, 153, 153));
        jTabbedPaneInventory.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPaneInventory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPaneInventoryMouseClicked(evt);
            }
        });

        jPanel7.setBackground(new java.awt.Color(153, 153, 153));

        jPanel6.setBackground(new java.awt.Color(153, 153, 153));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Add Items"));

        jLabel5.setText("Item ID :");

        txtitemID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtitemIDActionPerformed(evt);
            }
        });

        jLabel6.setText("Name :");

        jLabel7.setText("Quantity :");

        jLabel8.setText("Selling Price :");

        jLabel9.setText("Supplier ID :");

        jButton4.setText("Add Item");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Clear");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel39.setText("Cost Per Item:");

        jLabel46.setText("Stock ID :");

        jButton21.setText("Update Stock");
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(jButton21, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel6Layout.createSequentialGroup()
                                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel7)
                                        .addComponent(jLabel8)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE))
                                    .addGap(18, 18, 18))
                                .addGroup(jPanel6Layout.createSequentialGroup()
                                    .addComponent(jLabel39, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGap(7, 7, 7)))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel46)
                                .addGap(37, 37, 37)))
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtCostperitem, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                            .addComponent(txtprice)
                            .addComponent(txtquantity)
                            .addComponent(txtItemName)
                            .addComponent(txtitemID)
                            .addComponent(txtSupID)
                            .addComponent(txtstockID))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtitemID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(txtquantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(txtprice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtSupID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCostperitem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel39))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel46)
                    .addComponent(txtstockID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton21))
                .addGap(45, 45, 45))
        );

        jPanel10.setBackground(new java.awt.Color(153, 153, 153));
        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Remove Items"));

        jLabel10.setText("Item ID :");

        jLabel11.setText("Quantity :");

        jButton6.setText("Remove Item");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel47.setText("Stock ID :");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtdelitem)
                    .addComponent(txtdelq, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtdelstock))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtdelitem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtdelq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel47)
                    .addComponent(txtdelstock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addComponent(jButton6)
                .addGap(51, 51, 51))
        );

        jPanel16.setBackground(new java.awt.Color(153, 153, 153));
        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Supplier management"));

        jLabel36.setText("Supplier ID :");

        jLabel37.setText("Supplier name :");

        jButton25.setText("Add Supplier");
        jButton25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton25ActionPerformed(evt);
            }
        });

        jButton26.setText("Clear");
        jButton26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton26ActionPerformed(evt);
            }
        });

        jLabel38.setText("Supplier ID:");

        RemoveSuppbtn.setText("Remove Supplier");
        RemoveSuppbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveSuppbtnActionPerformed(evt);
            }
        });

        jLabel18.setText("Category :");

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(RemoveSuppbtn)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel16Layout.createSequentialGroup()
                            .addComponent(jLabel38)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtdelsup, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel16Layout.createSequentialGroup()
                            .addComponent(jButton25)
                            .addGap(41, 41, 41)
                            .addComponent(jButton26)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel16Layout.createSequentialGroup()
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel37, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel36, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(36, 36, 36)
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSuppID, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSuppName, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel16Layout.createSequentialGroup()
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(txtCategory))))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(txtSuppID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(txtSuppName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(txtCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel38)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton26)
                            .addComponent(jButton25))
                        .addGap(52, 52, 52)
                        .addComponent(txtdelsup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(65, 65, 65)
                .addComponent(RemoveSuppbtn)
                .addContainerGap(321, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPaneInventory.addTab("Inventory And Supplier", jPanel7);

        jPanel11.setBackground(new java.awt.Color(153, 153, 153));

        jLabel12.setText("Search by Name/ID :");

        TBLItem_table.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        TBLItem_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Name", "Available Quantity ", "Price per Unit", "Suplier", "StockID"
            }
        ));
        TBLItem_table.setRowHeight(27);
        jScrollPane2.setViewportView(TBLItem_table);

        jButton7.setText("Search by Name");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton30.setText("Search by ID");
        jButton30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton30ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 936, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtitemSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton30, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtitemSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7)
                    .addComponent(jButton30))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 126, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(169, 169, 169))
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPaneInventory.addTab("View Items", jPanel8);

        jPanel19.setBackground(new java.awt.Color(153, 153, 153));
        jPanel19.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel19MouseClicked(evt);
            }
        });
        jPanel19.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnDopayment.setText("Do payments to Supplier");
        btnDopayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDopaymentActionPerformed(evt);
            }
        });
        jPanel19.add(btnDopayment, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 20, 240, -1));

        jLabel40.setText("Supplier ID :");
        jPanel19.add(jLabel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(29, 15, 83, -1));

        jLabel53.setText("Amount :");
        jPanel19.add(jLabel53, new org.netbeans.lib.awtextra.AbsoluteConstraints(29, 48, 83, -1));
        jPanel19.add(txtsupamt, new org.netbeans.lib.awtextra.AbsoluteConstraints(159, 45, 275, -1));
        jPanel19.add(txtsupIDpay, new org.netbeans.lib.awtextra.AbsoluteConstraints(159, 12, 275, -1));

        TBLviewSupp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Supplier ID", "Supplier Name", "Category", "Remaining Payment"
            }
        ));
        jScrollPane8.setViewportView(TBLviewSupp);

        jPanel19.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 190, 910, 247));

        jTabbedPaneInventory.addTab("View Suppliers", jPanel19);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneInventory)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jTabbedPaneInventory)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Inventory and Supplier Management", jPanel3);

        jPanel15.setBackground(new java.awt.Color(153, 153, 153));

        jTabbedPane4.setBackground(new java.awt.Color(0, 255, 255));
        jTabbedPane4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane4MouseClicked(evt);
            }
        });

        jPanel17.setBackground(new java.awt.Color(153, 153, 153));
        jPanel17.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel17.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel28.setText("Employee ID :");
        jPanel17.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 97, -1));

        jLabel29.setText("Employee Name :");
        jPanel17.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));

        jLabel30.setText("Contact Number :");
        jPanel17.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, -1, -1));
        jPanel17.add(txtempID, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 60, 237, -1));

        jLabel31.setText("Address :");
        jPanel17.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 97, -1));
        jPanel17.add(txtempName, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 90, 237, -1));
        jPanel17.add(txtempContact, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 130, 237, -1));
        jPanel17.add(txtempAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 170, 237, -1));

        jButton18.setText("Add Employee");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });
        jPanel17.add(jButton18, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 150, -1, -1));

        jButton19.setText("Clear");
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });
        jPanel17.add(jButton19, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 200, 101, -1));

        jButton20.setText("Update Record");
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });
        jPanel17.add(jButton20, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 170, 128, -1));

        jLabel32.setText("Add an Employee ");
        jPanel17.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 100, -1));

        jSeparator1.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));
        jPanel17.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 380, 470, 14));

        jLabel19.setText("Employee ID :");
        jPanel17.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 450, -1, -1));
        jPanel17.add(txtdelempID, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 450, 233, -1));

        btnremove_employee.setText("Remove an employee");
        btnremove_employee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnremove_employeeActionPerformed(evt);
            }
        });
        jPanel17.add(btnremove_employee, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 510, -1, -1));

        jLabel27.setText("Salary :");
        jPanel17.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 97, -1));
        jPanel17.add(txtempSal, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 210, 237, -1));

        jLabel33.setText("Value :");
        jPanel17.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 130, 60, -1));
        jPanel17.add(txtempupID, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 60, 228, -1));

        ComboBoxEmpUp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a record to update", "Contact Number", "Address", "Salary", "OT", "Extra_Leaves", "Monthly_Leaves" }));
        jPanel17.add(ComboBoxEmpUp, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 100, 228, -1));
        jPanel17.add(txtempUpVal, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 130, 228, -1));

        jSeparator4.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel17.add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 1, 14, 620));

        jLabel41.setText("Employee Salary Advaces ");
        jPanel17.add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 380, -1, -1));

        jLabel42.setText("Employee ID :");
        jPanel17.add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 430, -1, -1));
        jPanel17.add(txtempAID, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 430, 271, -1));

        jLabel43.setText("Advance:");
        jPanel17.add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 470, -1, -1));
        jPanel17.add(txtAamt, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 470, 271, -1));
        jPanel17.add(txtempOTR, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 250, 237, -1));

        jLabel44.setText("OT rate :");
        jPanel17.add(jLabel44, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, -1, -1));

        jLabel48.setText("Extra Leave Rate :");
        jPanel17.add(jLabel48, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, -1, -1));
        jPanel17.add(txtempLeaveR, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 290, 237, -1));

        jSeparator5.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator5.setForeground(new java.awt.Color(0, 0, 0));
        jPanel17.add(jSeparator5, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 10, 430, 14));

        jSeparator6.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator6.setForeground(new java.awt.Color(0, 0, 0));
        jPanel17.add(jSeparator6, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 390, 410, 14));

        jLabel49.setText("Remove an Employee ");
        jPanel17.add(jLabel49, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 380, -1, -1));

        jLabel51.setText("Employee ID :");
        jPanel17.add(jLabel51, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 60, -1, -1));

        jSeparator7.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator7.setForeground(new java.awt.Color(0, 0, 0));
        jPanel17.add(jSeparator7, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 10, 460, 14));

        jLabel52.setText("Update an Employee record");
        jPanel17.add(jLabel52, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 10, 180, -1));

        jButton29.setText("Confirm Advance");
        jButton29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton29ActionPerformed(evt);
            }
        });
        jPanel17.add(jButton29, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 520, 150, -1));

        jLabel20.setText("Monthy Leaves ;");
        jPanel17.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 100, -1));
        jPanel17.add(txtempLeavsAmt, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 340, 240, -1));

        jTabbedPane4.addTab("Manage Staff", jPanel17);

        jPanel20.setBackground(new java.awt.Color(153, 153, 153));

        TBLEMP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee ID", "Name", "Contact", "Address", "Basic Salary"
            }
        ));
        jScrollPane5.setViewportView(TBLEMP);

        jButton3.setText("View Report");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1130, Short.MAX_VALUE)
                    .addGroup(jPanel20Layout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jButton3)
                .addContainerGap(162, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("View Staff", jPanel20);

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(jTabbedPane4)
                .addGap(1, 1, 1))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(jTabbedPane4)
                .addGap(1, 1, 1))
        );

        jTabbedPane1.addTab("Staff Management", jPanel15);

        jPanel4.setBackground(new java.awt.Color(153, 153, 153));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel13.setText("Employee ID :");

        jLabel14.setText("Overtime Hours :");

        jButton8.setText("Add to Salary");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel15.setText("Employee ID :");

        jButton10.setText("Add Leave");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jLabel17.setText("Number of Days :");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel14))
                                .addGap(70, 70, 70)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtempLeaveID, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                                    .addComponent(txtNumofDays)
                                    .addComponent(txtOTHrs)
                                    .addComponent(txtempOTID)))
                            .addComponent(jButton8)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton10)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel17)))
                .addContainerGap(712, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtempOTID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(txtOTHrs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jButton8)
                .addGap(50, 50, 50)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(txtempLeaveID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(txtNumofDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(58, 58, 58)
                .addComponent(jButton10)
                .addContainerGap(301, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Staff records", jPanel4);

        jPanel18.setBackground(new java.awt.Color(153, 153, 153));

        TBLSalary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee ID", "Name", "Work Hours", "Total Salary"
            }
        ));
        jScrollPane6.setViewportView(TBLSalary);

        jButton11.setText("Show Report");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton28.setText("Calculate Salary");
        jButton28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton28ActionPerformed(evt);
            }
        });

        jButton31.setText("Show in The table");
        jButton31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton31ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addComponent(jButton11)
                        .addGap(114, 114, 114)
                        .addComponent(jButton28)
                        .addGap(107, 107, 107)
                        .addComponent(jButton31)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 1111, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton11)
                    .addComponent(jButton28)
                    .addComponent(jButton31))
                .addContainerGap(291, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Salary Report", jPanel18);

        jPanel9.setBackground(new java.awt.Color(153, 153, 153));

        jLabel34.setText("Stall ID :");

        jLabel35.setText("Stall Name :");

        jButton22.setText("Add substall");
        jButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton22ActionPerformed(evt);
            }
        });

        jButton23.setText("Remove");
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });

        TBLSubstall.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Stall ID", "Stall_name", "Revenue", "Real_revenue"
            }
        ));
        TBLSubstall.setRowHeight(25);
        jScrollPane7.setViewportView(TBLSubstall);

        jButton24.setText("View Sub Stalls");
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel35, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel34, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtStallID)
                            .addComponent(txtStallName, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE))
                        .addGap(81, 81, 81)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton22, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                            .addComponent(jButton23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton24)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(135, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(txtStallID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton22))
                .addGap(32, 32, 32)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(txtStallName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton23))
                .addGap(111, 111, 111)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(jButton24)
                .addContainerGap(199, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Sub Stalls", jPanel9);

        jPanel14.setBackground(new java.awt.Color(0, 0, 0));
        jPanel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel14MouseClicked(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("Vilasa Management System");

        jButton12.setText("Log Out");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        AdminPannelButton.setText("Admin Panel");
        AdminPannelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdminPannelButtonActionPerformed(evt);
            }
        });

        lblrole.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(lblrole, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61)
                .addComponent(AdminPannelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(jButton12)
                    .addComponent(AdminPannelButton)
                    .addComponent(lblrole, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
            .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtitemIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtitemIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtitemIDActionPerformed

    private void txtSitemIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSitemIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSitemIDActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // Generate jasper report for Salary
        try{
            JasperDesign jasdi = JRXmlLoader.load("C:\\Users\\Lasindu Ruwin\\Documents\\NetBeansProjects\\ProjectX\\src\\Reports\\Salary.jrxml");
            String sql = "SELECT a.empID, a.emp_name,a.OT_hrs, b.Total_work_hrs,b.Total_salary FROM employee a ,salary_report b WHERE a.empID = b.emp_ID ORDER BY empID ";
            JRDesignQuery newQuery = new JRDesignQuery();
            newQuery.setText(sql);
            
            jasdi.setQuery(newQuery);

            
            JasperReport js = JasperCompileManager.compileReport(jasdi);
            JasperPrint jp = JasperFillManager.fillReport(js, null, dbcon.Database_connection());
            
            JasperViewer.viewReport(jp,false);
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this,e);
        }
        
        
        
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // Code for Adding an Item :
        if("".equals(txtitemID.getText()) || "".equals(txtItemName.getText()) || "".equals(txtstockID.getText()) ||
                "".equals(txtSupID.getText()) || "".equals(txtprice.getText()) || "".equals(txtquantity.getText()) || "".equals(txtCostperitem.getText()))
        {
            JOptionPane.showMessageDialog(this, "Please fill all the fields requierd !");
        }
        else
        {
            
            if(txtitemID.getText().matches("[0-9]+") && txtstockID.getText().matches("[0-9]+") && txtSupID.getText().matches("[0-9]+") && txtprice.getText().matches("[0-9]+")
                    && txtquantity.getText().matches("[0-9]+") && txtCostperitem.getText().matches("[0-9]+"))
            {
                        try
                {
                    int itemID = Integer.parseInt(txtitemID.getText());            
                    String itemName = txtItemName.getText();
                    int StockID =Integer.parseInt(txtstockID.getText());
                    int SupID =Integer.parseInt(txtSupID.getText());
                    float price =Float.parseFloat(txtprice.getText());
                    int quantity =Integer.parseInt(txtquantity.getText());
                    float cost =Float.parseFloat(txtCostperitem.getText());
                    PreparedStatement ps;
                    ResultSet rs ;
                    PreparedStatement ps2;


                    if(itemID < 100 && SupID <100)
                    {
                        txtitemID.setText("");
                        JOptionPane.showMessageDialog(this, "Invalid Item ID");
                    }
                    else
                    {
                        String querry = "SELECT * FROM `supplier` WHERE `SupplierID`="+SupID+" ";
                        ps = dbcon.Database_connection().prepareStatement(querry);       
                        rs = ps.executeQuery();
                        if(rs.next())
                        {
                            String querry1 = "SELECT `Remaining_Payment` FROM `supplier` WHERE `SupplierID`="+SupID+" ";
                            ps = dbcon.Database_connection().prepareStatement(querry1);       
                            rs = ps.executeQuery();
                            float remcost=0.0f;
                            if(rs.next())
                            {remcost = rs.getFloat("Remaining_Payment");}

                            remcost= remcost+(cost*quantity);  

                            String querry2 = "INSERT INTO `items` (`itemID`, `item_name`,`SupplierID`) VALUES (?,?,?);";
                            String querry3 = "INSERT INTO `stock` (`stockID`, `price`, `quantity`, `cost`, `ItemID`) VALUES (?,?,?,?,?); ";
                            String querry4 = "UPDATE `supplier` SET `Remaining_Payment`=? WHERE `SupplierID`=?;";
                            ps2 = dbcon.Database_connection().prepareStatement(querry2);
                            ps2.setInt(1, itemID);
                            ps2.setString(2, itemName);
                            ps2.setInt(3,SupID);
                            ps2.execute();
                            ps2 = dbcon.Database_connection().prepareStatement(querry3);
                            ps2.setInt(1,StockID);
                            ps2.setFloat(2,price);
                            ps2.setInt(3,quantity);
                            ps2.setFloat(4,cost);
                            ps2.setInt(5,itemID);
                            ps2.execute();
                            ps2 = dbcon.Database_connection().prepareStatement(querry4);                                        
                            ps2.setFloat(1,remcost);
                            ps2.setInt(2,SupID);
                            ps2.execute();

                            JOptionPane.showMessageDialog(this, "Successful");
                            txtitemID.setText("");
                            txtItemName.setText("");
                            txtquantity.setText("");
                            txtprice.setText("");
                            txtSupID.setText("");
                            txtCostperitem.setText("");
                            txtstockID.setText("");
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "Invalid Supplier ID");
                        }
                    }





                }
                catch(NumberFormatException | SQLException e)
                {
                    JOptionPane.showMessageDialog(this, e);
                }
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Invalid character input");
            }
        }
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        LogIn mf = new LogIn();
        mf.setVisible(true);
    }//GEN-LAST:event_jButton12ActionPerformed

    private void AdminPannelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdminPannelButtonActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        Admin mf = new Admin();
        mf.setVisible(true);
    }//GEN-LAST:event_AdminPannelButtonActionPerformed

    private void jPanel14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel14MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel14MouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // Code for Clearing text fields in add items interface :
        txtitemID.setText("");
        txtItemName.setText("");
        txtquantity.setText("");
        txtprice.setText("");
        txtSupID.setText("");
        txtCostperitem.setText("");
        txtstockID.setText("");
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton25ActionPerformed
        // Code for Adding suppliers entry :
        if(!"".equals(txtSuppID.getText()) && !"".equals(txtSuppName.getText()) && !"".equals(txtCategory.getText()))
        {
            int suppID= Integer.parseInt(txtSuppID.getText());
            String suppName = txtSuppName.getText();
            String cat = txtCategory.getText();
            float r=0.0f;
            PreparedStatement ps;

            if(suppID> 100 && suppID < 999)
            {
                
            String querry ="INSERT INTO `supplier`(`SupplierID`, `SName`, `Category`, `Remaining_Payment`) VALUES (?,?,?,?)";
             try {
                 ps = dbcon.Database_connection().prepareStatement(querry);
                  ps.setInt(1, suppID);
                  ps.setString(2, suppName);
                  ps.setString(3,cat);
                  ps.setFloat(4,r);
                  ps.execute();
                  JOptionPane.showMessageDialog(this, "Successful");

             } catch (SQLException ex) {
                 Logger.getLogger(main_GUI.class.getName()).log(Level.SEVERE, null, ex);
                 JOptionPane.showMessageDialog(this, ex);
             }
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Invalid Suppplier ID");
            }
            
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Please enter required details to proceed");
        }

      
        
                   
    }//GEN-LAST:event_jButton25ActionPerformed

    private void jTabbedPaneInventoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPaneInventoryMouseClicked
        // Code for viewing data from the tables for items and suppliers ;
        DefaultTableModel table = (DefaultTableModel) TBLItem_table.getModel();
        PreparedStatement ps;
        ResultSet rs ;
        table.setRowCount(0);
        
        String querry = "SELECT a.itemID, a.item_name,b.quantity,b.price ,a.SupplierID,b.stockID FROM items a,stock b where a.itemID = b.itemID Order by a.itemID";
        try {
            ps = dbcon.Database_connection().prepareStatement(querry);
            rs = ps.executeQuery();
            
                
            while(rs.next())
            {
                int itemID = rs.getInt("itemID");
                String itemName = rs.getString("item_name");
                int qan = rs.getInt("quantity");
                float price = rs.getFloat("price");
                int suppID = rs.getInt("SupplierID");
                int stockID = rs.getInt("stockID");
                
                table.addRow(new Object[]{itemID,itemName,qan,price,suppID,stockID});
                
            }                       
            
        } catch (SQLException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,ex);
        }
         DefaultTableModel vtable = (DefaultTableModel) TBLviewSupp.getModel();
         vtable.setRowCount(0);
         String querry2 = "SELECT * FROM `supplier` Order by SupplierID";
         try {
             ps = dbcon.Database_connection().prepareStatement(querry2);
             rs = ps.executeQuery();
             
             while(rs.next())
            {
                int supID = rs.getInt("SupplierID");
                String supName = rs.getString("SName");
                String supCat = rs.getString("Category");
                float rem_pay = rs.getFloat("Remaining_Payment");
                
                
                vtable.addRow(new Object[]{supID,supName,supCat,rem_pay});
                
            }              
             
         } catch (SQLException ex) {
             Logger.getLogger(main_GUI.class.getName()).log(Level.SEVERE, null, ex);
         }
            
         
    }//GEN-LAST:event_jTabbedPaneInventoryMouseClicked

    
    private void RemoveSuppbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveSuppbtnActionPerformed
        // Code for removing Supplier entry :
        if("".equals(txtdelsup.getText()))
        {
            {JOptionPane.showMessageDialog(this,"Please enter the supplier ID");}
        }
        else
        {
            int delsup=Integer.parseInt(txtdelsup.getText());
            PreparedStatement ps;
            ResultSet rs;
            String querry1 = "SELECT * FROM `supplier` WHERE `SupplierID`= '"+delsup+"' ; ";
            String querry2 = "DELETE FROM `supplier` WHERE `SupplierID`='"+delsup+"' ; ";


            try {
                ps = dbcon.Database_connection().prepareStatement(querry1);
                rs = ps.executeQuery();
                if(rs.next())
                {
                    int response =JOptionPane.showConfirmDialog(this, "Do you really wan't to delete this suplier ?", "Confirm", JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);

                    if(response == JOptionPane.YES_OPTION)
                    {
                        ps = dbcon.Database_connection().prepareStatement(querry2);
                        ps.execute();
                        JOptionPane.showMessageDialog(this,"Supplier Removed");
                        txtdelsup.setText("");
                    }
                    else if(response == JOptionPane.NO_OPTION || response == JOptionPane.CLOSED_OPTION)
                    {
                        JOptionPane.showMessageDialog(this,"Operation cancelled");
                        txtdelsup.setText("");
                    }

                }
                else
                {JOptionPane.showMessageDialog(this,"There's no such Supplier in the database.");}






            } catch (SQLException ex) {
                Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
                {JOptionPane.showMessageDialog(this,ex);}
            }
        
        }
        
    }//GEN-LAST:event_RemoveSuppbtnActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        //Code for romoving an item ,stock or redusing item quantity ;
        
        if("".equals(txtdelitem.getText()) || "".equals(txtdelq.getText()) || "".equals(txtdelstock.getText()))
        {
            JOptionPane.showMessageDialog(this,"Please fill The require fileds to continue ");
        }
        else
        {
            int delI = Integer.parseInt(txtdelitem.getText());
            int delQ = Integer.parseInt(txtdelq.getText());
            int delS = Integer.parseInt(txtdelstock.getText());
            int itemID=0, quantity=0, rows =0 ;
            PreparedStatement ps;
            ResultSet rs,rs2 ;
            String querry1 = "SELECT a.itemID, b.quantity, b.stockID FROM items a,stock b where a.itemID = b.itemID HAVING ItemID = "+delI+" "; 
            
            String querry3 = "SELECT a.itemID, b.quantity, b.stockID FROM items a,stock b where a.itemID = b.itemID HAVING ItemID = "+delI+" AND b.stockID="+delS+"";
            String delquerry1 = "DELETE FROM stock WHERE stockID = "+delS+" AND ItemID= "+delI+" ";
            String delquerry2 = "DELETE FROM items WHERE ItemID = "+delI+" ";

             try {
                 ps = dbcon.Database_connection().prepareStatement(querry1,ResultSet.TYPE_SCROLL_SENSITIVE, 
                            ResultSet.CONCUR_UPDATABLE);
                 rs = ps.executeQuery();
                 rs.last();
                 rows=rs.getRow();
                 JOptionPane.showMessageDialog(this,rows);
                 rs.beforeFirst();
                 ps = dbcon.Database_connection().prepareStatement(querry3);
                 rs2 = ps.executeQuery();
                 while(rs2.next())
                {
                    itemID = rs2.getInt("itemID");
                    quantity = rs2.getInt("quantity");
                }
                 if(itemID==delI && itemID >= 100)
                 {
                     if(quantity<=delQ)
                     {
                         
                         if (rows==1)
                         {
                            ps = dbcon.Database_connection().prepareStatement(delquerry1);
                            ps.execute();
                            ps = dbcon.Database_connection().prepareStatement(delquerry2);
                            ps.execute();
                            JOptionPane.showMessageDialog(this,"Entry Deleted");
                         }
                         else
                         {
                            ps = dbcon.Database_connection().prepareStatement(delquerry1);
                            ps.execute();
                            JOptionPane.showMessageDialog(this,"Entry Deleted");
                         }


                     }
                     else
                     {
                         int newQ = quantity - delQ ;
                         String querry2 = "UPDATE `stock` SET `quantity`="+newQ+" WHERE `stockID`="+delS+";";
                         ps = dbcon.Database_connection().prepareStatement(querry2);
                         ps.execute();
                         JOptionPane.showMessageDialog(this,"Quantity updated");
                     }
                 }
                 else
                 {
                     JOptionPane.showMessageDialog(this,"Invalid Item ID or The item is not in the database");
                 }




             } catch (SQLException ex) {
                 Logger.getLogger(main_GUI.class.getName()).log(Level.SEVERE, null, ex);
                 JOptionPane.showMessageDialog(this,ex);
             }
        }
        
        
            
        
        
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
        // Code for updating the stock for an item :
        
         if("".equals(txtitemID.getText()) || "".equals(txtstockID.getText()) || "".equals(txtprice.getText()) || "".equals(txtquantity.getText()) ||  "".equals(txtCostperitem.getText()) )
        {
            JOptionPane.showMessageDialog(this,"Please fill The required fileds to proceed ");
        }
        else
        {
            int itemID = Integer.parseInt(txtitemID.getText());                  
            int StockID =Integer.parseInt(txtstockID.getText());        
            float price =Float.parseFloat(txtprice.getText());
            int quantity =Integer.parseInt(txtquantity.getText());
            float cost =Float.parseFloat(txtCostperitem.getText());
            PreparedStatement ps;
            ResultSet rs ;

            String querry1 = "SELECT * FROM `items` WHERE `itemID`= '"+itemID+"' ; ";
             String querry2 = "INSERT INTO `stock` (`stockID`, `price`, `quantity`, `cost`, `ItemID`) VALUES (?,?,?,?,?); ";
             try {
                    ps = dbcon.Database_connection().prepareStatement(querry1);
                    rs = ps.executeQuery();
                    if(rs.next())
                    {
                        ps = dbcon.Database_connection().prepareStatement(querry2);
                        ps.setInt(1,StockID);
                        ps.setFloat(2,price);
                        ps.setInt(3,quantity);
                        ps.setFloat(4,cost);
                        ps.setInt(5,itemID);
                        ps.execute();
                        JOptionPane.showMessageDialog(this,"Stock Update Successful");
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this,"No Item entry found. Please check for the Item ID or Enter a full Item entry");
                    }




             } catch (SQLException ex) {
                 Logger.getLogger(main_GUI.class.getName()).log(Level.SEVERE, null, ex);
                 JOptionPane.showMessageDialog(this,ex);
             }
        }
        
        
        
    }//GEN-LAST:event_jButton21ActionPerformed

    private void jPanel19MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel19MouseClicked
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_jPanel19MouseClicked

    private void btnDopaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDopaymentActionPerformed
        // Code for adding payments to the suppliers ;
        
        
        if(!"".equals(txtsupIDpay.getText()) && !"".equals(txtsupamt.getText()))
        {
            int supID = Integer.parseInt(txtsupIDpay.getText());
            float amt = Float.parseFloat(txtsupamt.getText());
            PreparedStatement ps;
            ResultSet rs ;
            String querry1 = "Select*From `supplier` WHERE `SupplierID`="+supID+";";
           try {
             ps = dbcon.Database_connection().prepareStatement(querry1);
             rs = ps.executeQuery();
             if(rs.next())
             {               
                float pay = rs.getFloat("Remaining_Payment");
                if(amt<pay)
                {
                    float new_amt = pay-amt;
                    String querry2 = "UPDATE `supplier` SET `Remaining_Payment`="+new_amt+" WHERE `SupplierID`="+supID+";";
                    ps = dbcon.Database_connection().prepareStatement(querry2);
                    ps.execute();
                    JOptionPane.showMessageDialog(this,"Supplier Entry updated");
                    
                }
                else
                {
                    String querry2 = "UPDATE `supplier` SET `Remaining_Payment`=0 WHERE `SupplierID`="+supID+";";
                    ps = dbcon.Database_connection().prepareStatement(querry2);
                    ps.execute();
                    JOptionPane.showMessageDialog(this,"Supplier Entry updated");
                }
             }
             else
             {
                 JOptionPane.showMessageDialog(this,"Supplier not Found");
             }
            
                
            
             
             
            } catch (SQLException ex) {
                Logger.getLogger(main_GUI.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this,ex);
            } 
        }
        else
        {
            JOptionPane.showMessageDialog(this,"Please enter Supplier ID and Amount");
        }
         
             
        
    }//GEN-LAST:event_btnDopaymentActionPerformed

    private void jButton26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton26ActionPerformed
        // Code for clearing the text fields of supplier management interface ;
        txtSuppID.setText("");
        txtSuppName.setText("");
        txtCategory.setText("");
    }//GEN-LAST:event_jButton26ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // search by name:        
       
        String key = txtitemSearch.getText();
        
        if("".equals(key))
        {
            JOptionPane.showMessageDialog(this,"Please enter an Item name to Search");
        }
        else
        {
            DefaultTableModel table = (DefaultTableModel) TBLItem_table.getModel();
            PreparedStatement ps;
            ResultSet rs ;
            table.setRowCount(0);
            String querry = "SELECT a.itemID, a.item_name,b.quantity,b.price ,a.SupplierID,b.stockID FROM items a,stock b where a.itemID = b.itemID having item_name ='"+key+"';";
            try {
                ps = dbcon.Database_connection().prepareStatement(querry);
                rs = ps.executeQuery();


                while(rs.next())
                {
                    int itemID = rs.getInt("itemID");
                    String itemName = rs.getString("item_name");
                    int qan = rs.getInt("quantity");
                    float price = rs.getFloat("price");
                    int suppID = rs.getInt("SupplierID");
                    int stockID = rs.getInt("stockID");

                    table.addRow(new Object[]{itemID,itemName,qan,price,suppID,stockID});

                }                       

            } catch (SQLException ex) {
                Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this,ex);
            }
        }
        
        
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton30ActionPerformed
        // Search by ID
        String key = txtitemSearch.getText();
        
        if("".equals(key))
        {
            JOptionPane.showMessageDialog(this,"Please enter an Item ID to Search");
        }
        else
        {
            DefaultTableModel table = (DefaultTableModel) TBLItem_table.getModel();
            PreparedStatement ps;
            ResultSet rs ;
            table.setRowCount(0);
            String querry = "SELECT a.itemID, a.item_name,b.quantity,b.price ,a.SupplierID,b.stockID FROM items a,stock b where a.itemID = b.itemID having itemID ="+key+";";
            try {
                ps = dbcon.Database_connection().prepareStatement(querry);
                rs = ps.executeQuery();


                while(rs.next())
                {
                    int itemID = rs.getInt("itemID");
                    String itemName = rs.getString("item_name");
                    int qan = rs.getInt("quantity");
                    float price = rs.getFloat("price");
                    int suppID = rs.getInt("SupplierID");
                    int stockID = rs.getInt("stockID");

                    table.addRow(new Object[]{itemID,itemName,qan,price,suppID,stockID});

                }                       

            } catch (SQLException ex) {
                Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this,ex);
            }
        }
    }//GEN-LAST:event_jButton30ActionPerformed

    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton22ActionPerformed
        // Add a sub stall to the database
        if(!"".equals(txtStallID.getText()) && !"".equals(txtStallName.getText()))
        {
            
            int stallID= Integer.parseInt(txtStallID.getText());
            String stallName = txtStallName.getText();
            
            PreparedStatement ps;
            ResultSet rs;
            
            String querry1 ="SELECT `stallID` FROM `sub_stalls` WHERE `stallID`= "+stallID+";";
            String querry2 ="INSERT INTO `sub_stalls`(`stallID`, `Stall_name`, `revenue`, `real_revenue`,`Due`) VALUES (?,?,0,0,0)";
             try {
                 ps = dbcon.Database_connection().prepareStatement(querry1);
                 rs = ps.executeQuery();
                 if(rs.next())
                 {
                      JOptionPane.showMessageDialog(this, "Stall ID already exists"); 
                 }
                 else
                 {
                    ps = dbcon.Database_connection().prepareStatement(querry2);
                    ps.setInt(1, stallID);
                    ps.setString(2, stallName);
                    ps.execute();
                  
                    JOptionPane.showMessageDialog(this, "Successfully Added"); 
                 }
                 
                 

             } catch (SQLException ex) {
                 Logger.getLogger(main_GUI.class.getName()).log(Level.SEVERE, null, ex);
                 JOptionPane.showMessageDialog(this, ex);
             }
            
        }
        else
        {
            JOptionPane.showMessageDialog(this,"Please enter a Substall ID and Name");
        }
        
        
        
        
        
    }//GEN-LAST:event_jButton22ActionPerformed

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        // Deleting a sub stall
         if(!"".equals(txtStallID.getText()))
        {
            
            int delstallID= Integer.parseInt(txtStallID.getText());            
            
            PreparedStatement ps;
            ResultSet rs;
            
            String querry1 ="SELECT `stallID` FROM `sub_stalls` WHERE `stallID`= "+delstallID+";";
            String querry2 ="DELETE FROM `sub_stalls` WHERE `stallID`="+delstallID+"";
             try {
                 ps = dbcon.Database_connection().prepareStatement(querry1);
                 rs = ps.executeQuery();
                 if(rs.next())
                 {
                    ps = dbcon.Database_connection().prepareStatement(querry2);                    
                    ps.execute();
                  
                    JOptionPane.showMessageDialog(this, "Stall removed Successfully"); 
                 }
                 else
                 {

                    JOptionPane.showMessageDialog(this, "Stall ID doesn't exist"); 
                 }
                 
                 

             } catch (SQLException ex) {
                 Logger.getLogger(main_GUI.class.getName()).log(Level.SEVERE, null, ex);
                 JOptionPane.showMessageDialog(this, ex);
             }
            
        }
        else
        {
            JOptionPane.showMessageDialog(this,"Please enter a Substall ID");
        }
    }//GEN-LAST:event_jButton23ActionPerformed

    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed
        // View the sub stall entries ;
        DefaultTableModel table = (DefaultTableModel) TBLSubstall.getModel();
        PreparedStatement ps;
        ResultSet rs ;
        table.setRowCount(0);
        
        String querry = "SELECT * FROM sub_stalls order by stallID";
        try {
            ps = dbcon.Database_connection().prepareStatement(querry);
            rs = ps.executeQuery();
            
                
            while(rs.next())
            {
                int stallID = rs.getInt("stallID");
                String StallName = rs.getString("Stall_name");
                float rev = rs.getFloat("revenue");
                float Rrev = rs.getFloat("real_revenue");
                
                table.addRow(new Object[]{stallID,StallName,rev,Rrev});
                
            }                       
            
        } catch (SQLException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,ex);
        }
    }//GEN-LAST:event_jButton24ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        // Adding a new employee to the system ;
           if(!"".equals(txtempID.getText()) && !"".equals(txtempName.getText()) && !"".equals(txtempContact.getText()) && !"".equals(txtempAddress.getText()) 
                   && !"".equals(txtempSal.getText()) && !"".equals(txtempOTR.getText()) && !"".equals(txtempLeaveR.getText()) && !"".equals(txtempLeavsAmt.getText()))
        {
            
            if(txtempID.getText().matches("[0-9]+") && txtempContact.getText().matches("[0-9]+") && txtempSal.getText().matches("[0-9]+")
                    && txtempOTR.getText().matches("[0-9]+") && txtempLeaveR.getText().matches("[0-9]+") && txtempLeavsAmt.getText().matches("[0-9]+") )
            {
                int empID= Integer.parseInt(txtempID.getText());
                String empName = txtempName.getText();
                int empcontact= Integer.parseInt(txtempContact.getText());
                String empAdd = txtempAddress.getText();
                float empsal= Float.parseFloat(txtempSal.getText());
                float empOTR= Float.parseFloat(txtempOTR.getText());
                float empLeavR= Float.parseFloat(txtempLeaveR.getText());
                int empLeavAmt= Integer.parseInt(txtempLeavsAmt.getText());

                PreparedStatement ps;
                ResultSet rs;

                String querry1 ="SELECT * FROM `employee` WHERE `empID`= "+empID+";";
                String querry2 ="INSERT INTO `employee`(`empID`, `emp_name`, `contact`, `address`, `basic_salary`, `OT_rate`, `OT_hrs`, `leave_rate`,"
                        + " `leave_hrs`, `Paied_advances`,`Leaves_amount`,`Leaves_per_month`) VALUES (?,?,?,?,?,?,0,?,0,0,?,? )";
                String querry3 = "INSERT INTO `salary_report` (`emp_ID`, `Total_work_hrs`, `Total_salary`, `date`) VALUES ("+empID+", '0', '0', '0000-00-00');";

                if(empID > 1000 && empID < 9999)
                {
                    try {
                     ps = dbcon.Database_connection().prepareStatement(querry1);
                     rs = ps.executeQuery();
                     if(rs.next())
                     {
                          JOptionPane.showMessageDialog(this, "Employee ID already exists"); 
                     }
                     else
                     {
                        ps = dbcon.Database_connection().prepareStatement(querry2);
                        ps.setInt(1, empID);
                        ps.setString(2, empName);
                        ps.setInt(3, empcontact);
                        ps.setString(4, empAdd);
                        ps.setFloat(5, empsal);
                        ps.setFloat(6, empOTR);
                        ps.setFloat(7, empLeavR);
                        ps.setFloat(8, empLeavAmt);
                        ps.setFloat(9, empLeavAmt);
                        ps.execute();
                        ps = dbcon.Database_connection().prepareStatement(querry3);
                        ps.execute();

                        JOptionPane.showMessageDialog(this, "Successfully Added"); 
                        txtempID.setText("");
                        txtempName.setText("");
                        txtempContact.setText("");
                        txtempAddress.setText("");
                        txtempSal.setText("");
                        txtempOTR.setText("");
                        txtempLeaveR.setText("");
                        txtempLeavsAmt.setText("");
                     }


                 } catch (SQLException ex) {
                     Logger.getLogger(main_GUI.class.getName()).log(Level.SEVERE, null, ex);
                     JOptionPane.showMessageDialog(this, ex);
                 }
                }
                else
                {
                    JOptionPane.showMessageDialog(this,"invalid employee ID format");
                }
            }
            else
            {
                JOptionPane.showMessageDialog(this,"invalid Character input");
            }
            
        }
        else
        {
            JOptionPane.showMessageDialog(this,"Please enter all the employee details to proceed");
        }
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        // clear the text boxes in employee adding area
        txtempID.setText("");
        txtempName.setText("");
        txtempContact.setText("");
        txtempAddress.setText("");
        txtempSal.setText("");
        txtempOTR.setText("");
        txtempLeaveR.setText("");
        txtempLeavsAmt.setText("");
    }//GEN-LAST:event_jButton19ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        // Update a single record of an employee
        if((!"".equals(txtempupID.getText()) && !"".equals(txtempUpVal.getText())) && !"Select a record to update".equals(ComboBoxEmpUp.getSelectedItem().toString()))
        {
            int empID = Integer.parseInt(txtempupID.getText());  
            
            int upvali;
            float upvalf ;
            String upval ;
            
            String upkey = ComboBoxEmpUp.getSelectedItem().toString();            
            
            PreparedStatement ps;
            ResultSet rs;
            
            String querry1 ="SELECT * FROM `employee` WHERE `empID`= "+empID+";";
            String querry2;
             try {
                 ps = dbcon.Database_connection().prepareStatement(querry1);
                 rs = ps.executeQuery();
                 if(rs.next())
                 {
                      
                      switch(upkey)
                      {
                          case "Contact Number":
                              upvali = Integer.parseInt(txtempUpVal.getText());
                              querry2 ="UPDATE `employee` SET contact ="+upvali+" WHERE `empID`="+empID+"";
                              ps = dbcon.Database_connection().prepareStatement(querry2);
                              ps.execute();                              
                              JOptionPane.showMessageDialog(this, "Update successful");
                              txtempUpVal.setText("");
                              break;
                              
                          case "Address":
                              upval = txtempUpVal.getText();
                              querry2 ="UPDATE `employee` SET address ='"+upval+"' WHERE `empID`="+empID+"";
                              ps = dbcon.Database_connection().prepareStatement(querry2);
                              ps.execute();
                              JOptionPane.showMessageDialog(this, "Update successful");
                              txtempUpVal.setText("");
                              break;
                              
                          case "Salary":
                              upvalf = Float.parseFloat(txtempUpVal.getText());
                              querry2 ="UPDATE `employee` SET basic_salary ="+upvalf+" WHERE `empID`="+empID+"";
                              ps = dbcon.Database_connection().prepareStatement(querry2);
                              ps.execute();
                              JOptionPane.showMessageDialog(this, "Update successful"); 
                              txtempUpVal.setText("");
                              break;
                              
                          case "OT":
                              upvalf = Float.parseFloat(txtempUpVal.getText());
                              querry2 ="UPDATE `employee` SET OT_rate ="+upvalf+"  WHERE `empID`="+empID+"";
                              ps = dbcon.Database_connection().prepareStatement(querry2);
                              ps.execute();
                              JOptionPane.showMessageDialog(this, "Update successful"); 
                              txtempUpVal.setText("");
                              break;
                              
                          case "Extra_Leaves":
                              upvalf = Float.parseFloat(txtempUpVal.getText());
                              querry2 ="UPDATE `employee` SET leave_rate ="+upvalf+"  WHERE `empID`="+empID+""; 
                              ps = dbcon.Database_connection().prepareStatement(querry2);
                              ps.execute();
                              JOptionPane.showMessageDialog(this, "Update successful"); 
                              txtempUpVal.setText("");
                              break;
                              
                          case "Monthly_Leaves":
                              upvali = Integer.parseInt(txtempUpVal.getText());
                              querry2 ="UPDATE `employee` SET Leaves_amount ="+upvali+"  WHERE `empID`="+empID+"";
                              ps = dbcon.Database_connection().prepareStatement(querry2);
                              ps.execute();
                              JOptionPane.showMessageDialog(this, "Update successful"); 
                              txtempUpVal.setText("");
                              break;
                              
                          default:
                              JOptionPane.showMessageDialog(this, "Couldn't Update"); 
                              
                              
                      }
                       
                 }
                 else
                 {
                   
                  
                    JOptionPane.showMessageDialog(this, "Employee ID doesn't exist"); 
                 }
                 
                 

             } catch (SQLException ex) {
                 Logger.getLogger(main_GUI.class.getName()).log(Level.SEVERE, null, ex);
                 JOptionPane.showMessageDialog(this, ex);
             }
            
            
            
            
        } else {
            JOptionPane.showMessageDialog(this,"Please enter the required details to update an employee record");
         }
        
    }//GEN-LAST:event_jButton20ActionPerformed

    private void btnremove_employeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnremove_employeeActionPerformed
        // Remove an employee record
        if(!"".equals(txtdelempID.getText()))
        {
            
            int delempID= Integer.parseInt(txtdelempID.getText());            
            
            PreparedStatement ps;
            ResultSet rs;
            
            String querry1 ="SELECT `empID` FROM `employee` WHERE `empID`="+delempID+";";
            String querry2 ="DELETE FROM `employee` WHERE `empID`="+delempID+"";
            String querry3 ="DELETE FROM `salary_report` WHERE `emp_ID`="+delempID+"";
             try {
                 ps = dbcon.Database_connection().prepareStatement(querry1);
                 rs = ps.executeQuery();
                 if(rs.next())
                 {
                    int response =JOptionPane.showConfirmDialog(this, "Do you really wan't to delete this employee ?", "Confirm", JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                    
                    if(response == JOptionPane.YES_OPTION)
                    {
                        ps = dbcon.Database_connection().prepareStatement(querry2);                    
                        ps.execute();
                        ps = dbcon.Database_connection().prepareStatement(querry3);                    
                        ps.execute();
                        txtdelempID.setText("");
                        JOptionPane.showMessageDialog(this, "Employee removed Successfully");                         
                    }
                    else if(response == JOptionPane.NO_OPTION || response == JOptionPane.CLOSED_OPTION)
                    {
                        JOptionPane.showMessageDialog(this,"Operation cancelled");
                    }
                    
                 }
                 else
                 {

                    JOptionPane.showMessageDialog(this, "Employee ID doesn't exist"); 
                 }
                 
                 

             } catch (SQLException ex) {
                 Logger.getLogger(main_GUI.class.getName()).log(Level.SEVERE, null, ex);
                 JOptionPane.showMessageDialog(this, ex);
             }
            
        }
        else
        {
            JOptionPane.showMessageDialog(this,"Please enter an employee ID");
        }
        
        
    }//GEN-LAST:event_btnremove_employeeActionPerformed

    private void jButton29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton29ActionPerformed
        // Add given advances too employees ;
        if(!"".equals(txtempAID.getText()) && !"".equals(txtAamt.getText()))
        {
            int empID= Integer.parseInt(txtempAID.getText());
            float advance= Float.parseFloat(txtAamt.getText());
            
            PreparedStatement ps;
            ResultSet rs;
            String querry1 ="SELECT `empID`,`basic_salary`,`Paied_advances` FROM `employee` WHERE `empID`="+empID+";";
            
            try {
                    ps = dbcon.Database_connection().prepareStatement(querry1);
                    rs = ps.executeQuery();
                    if(rs.next())
                    {
                        float amt=rs.getFloat("Paied_advances");
                        float sal=rs.getFloat("basic_salary");
                        if (advance > sal)
                        {
                            JOptionPane.showMessageDialog(this,"The requested ammount is more than the basic salary of the employee");
                            
                            
                        }
                        else
                        {
                                                        
                            float tot = amt + advance;
                            String querry3 ="UPDATE `employee` SET `Paied_advances`="+tot+" WHERE `empID`="+empID+";";
                            ps = dbcon.Database_connection().prepareStatement(querry3);
                            ps.execute();
                            
                            
                            
                            JOptionPane.showMessageDialog(this,"Advance added");
                            txtempAID.setText("");
                            txtAamt.setText("");
                        }
                        
                        
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this,"Employee ID not found");
                                               
                    }
                
                
                
            } catch (SQLException ex) {
                Logger.getLogger(main_GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
            
            
        }
        else
        {
            JOptionPane.showMessageDialog(this,"Please enter an employee ID and the advance ammount :");
        }
        
        
        
    }//GEN-LAST:event_jButton29ActionPerformed

    private void jTabbedPane4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane4MouseClicked
        // employee table
        
        DefaultTableModel table = (DefaultTableModel) TBLEMP.getModel();
        PreparedStatement ps;
        ResultSet rs ;
        table.setRowCount(0);
        String querry = "SELECT * FROM `employee` order by empID";
        try {
            ps = dbcon.Database_connection().prepareStatement(querry);
            rs = ps.executeQuery();
            
                
            while(rs.next())
            {
                String empID = rs.getString("empID");                
                String empname = rs.getString("emp_name");
                String empcn = rs.getString("contact");
                String empadd = rs.getString("address");
                String empsal = rs.getString("basic_salary");
                
                table.addRow(new Object[]{empID,empname,empcn,empadd,empsal});
                
            }
            
   
            
            
            
        } catch (SQLException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,ex);
        }
    }//GEN-LAST:event_jTabbedPane4MouseClicked

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // ADD OT hours to an employee
        if(!"".equals(txtempOTID.getText()) && !"".equals(txtOTHrs.getText()))
        {
            if(txtempOTID.getText().matches("[0-9]+") && txtOTHrs.getText().matches("[0-9]+"))
                {
                    int empID= Integer.parseInt(txtempOTID.getText());
                int OT = Integer.parseInt(txtOTHrs.getText());

                PreparedStatement ps;
                ResultSet rs;

                try {
                        String querry1 ="SELECT `empID`,`OT_hrs` FROM `employee` WHERE `empID`="+empID+";";

                        ps = dbcon.Database_connection().prepareStatement(querry1);
                        rs = ps.executeQuery();

                        if (rs.next())
                        {
                            int doneOT = rs.getInt("OT_hrs");
                            int newOT= doneOT + OT;
                            String querry2 ="UPDATE `employee` SET `OT_hrs`="+newOT+" WHERE `empID`="+empID+";";
                            ps = dbcon.Database_connection().prepareStatement(querry2);
                            ps.execute();
                            JOptionPane.showMessageDialog(this,"OT hours added");
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this,"Employee not found");
                        }



                    } catch (SQLException ex) {
                        Logger.getLogger(main_GUI.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this,ex);
                    }
            }
            else
            {JOptionPane.showMessageDialog(this,"invalid input type");}
          
        }
        else
        {
            JOptionPane.showMessageDialog(this,"Please enter Employee's ID and amount of OT hours");
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // ADD Leaves to an employee record 

        if(!"".equals(txtempLeaveID.getText()) && !"".equals(txtNumofDays.getText()))
        {
                  if(txtempLeaveID.getText().matches("[0-9]+") && txtNumofDays.getText().matches("[0-9]+"))
                  {
                      int empID= Integer.parseInt(txtempLeaveID.getText());
                      int days = Integer.parseInt(txtNumofDays.getText());
                      
                      PreparedStatement ps;
                      ResultSet rs;

                      try {
                          String querry1 ="SELECT `empID`,`leave_hrs`,`Leaves_amount` FROM `employee` WHERE `empID`="+empID+";";                
                          ps = dbcon.Database_connection().prepareStatement(querry1);
                          rs = ps.executeQuery();

                          if (rs.next())
                          {
                              int remLeaves = rs.getInt("Leaves_amount");
                              int hrs= rs.getInt("leave_hrs");

                              if(remLeaves>0)
                              {
                                  if(remLeaves>=days)
                                  {
                                      int newLeaves = remLeaves -days ;
                                      String querry2 ="UPDATE `employee` SET `Leaves_amount`="+newLeaves+" WHERE `empID`="+empID+";";
                                      ps = dbcon.Database_connection().prepareStatement(querry2);
                                      ps.execute();
                                      JOptionPane.showMessageDialog(this,"Leaves Accepted");
                                  }
                                  else
                                  {                            
                                      JOptionPane.showMessageDialog(this,"Requesting more leaves than The Employee have");
                                      int newLeaves =  days - remLeaves;
                                      int LeaveHrs = newLeaves*7;
                                      int newLeaveHrs = LeaveHrs+hrs;
                                      String querry2 ="UPDATE `employee` SET `leave_hrs`= "+newLeaveHrs+",`Leaves_amount`=0 WHERE `empID`="+empID+";";
                                      ps = dbcon.Database_connection().prepareStatement(querry2);
                                      ps.execute();
                                      JOptionPane.showMessageDialog(this,"Leaves added");
                                  }
                              }
                              else
                              {
                                 int LeaveHrs = days*7;
                                 int newLeaveHrs = LeaveHrs+hrs;
                                 String querry3 ="UPDATE `employee` SET `leave_hrs`= "+newLeaveHrs+",`Leaves_amount`=0 WHERE `empID`="+empID+";"; 
                                 ps = dbcon.Database_connection().prepareStatement(querry3);
                                 ps.execute();
                                 JOptionPane.showMessageDialog(this,"Leaves added");
                              }


                          }
                          else
                          {
                              JOptionPane.showMessageDialog(this,"Employee not found");
                          }



                      } catch (SQLException ex) {
                          Logger.getLogger(main_GUI.class.getName()).log(Level.SEVERE, null, ex);
                          JOptionPane.showMessageDialog(this,ex);
                      }}
                  else
                  {
                      JOptionPane.showMessageDialog(this,"Invalid Input type");
                  }
        }
        else
        {
            JOptionPane.showMessageDialog(this,"Please enter Employee's ID, Leave type and amount of days");
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton28ActionPerformed
        // Salary report table
        PreparedStatement ps;
        ResultSet rs;
                
        String querry ="SELECT `empID`,`basic_salary`, `OT_rate`, `OT_hrs`, `leave_rate`, `leave_hrs`,`Paied_advances` FROM `employee` ;"; 
        
         
        try {
             ps = dbcon.Database_connection().prepareStatement(querry);
             rs = ps.executeQuery();
             while(rs.next())
             {
                 int eID = rs.getInt("empID");
                 float bsal = rs.getFloat("basic_salary");
                 float advances = rs.getFloat("Paied_advances");                 
                 float OTrate = rs.getFloat("OT_rate");
                 int OThrs = rs.getInt("OT_hrs");
                 float LeaveRate = rs.getFloat("leave_rate");
                 int LeaveHrs = rs.getInt("leave_hrs");
                 
                 float newbsal= bsal-advances;
                 float OTsal = OThrs*OTrate;
                 float leavepenalty = LeaveHrs*LeaveRate;
                 
                 int workhrs =182 +OThrs-LeaveHrs/7;
                 
                 float totsal=newbsal+OTsal;
                 float final_sal = totsal-leavepenalty;
                 DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");  
                 LocalDateTime now = LocalDateTime.now();
                 String day = dtf.format(now);
                 
                 String querry2 ="UPDATE `salary_report` SET `Total_work_hrs`=?, `Total_salary`=?, `date`=? WHERE `emp_ID`= ?"; 
                 ps = dbcon.Database_connection().prepareStatement(querry2);
                 ps.setInt(1,workhrs);
                 ps.setFloat(2,final_sal);
                 ps.setString(3,day);
                 ps.setInt(4,eID);
                 ps.execute();
                 
             }
             JOptionPane.showMessageDialog(this,"Salary Calculated");
             
             
             
             
         } catch (SQLException ex) {
             Logger.getLogger(main_GUI.class.getName()).log(Level.SEVERE, null, ex);
             JOptionPane.showMessageDialog(this,ex);
         }
                   
          
        
        
    }//GEN-LAST:event_jButton28ActionPerformed

    private void jButton31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton31ActionPerformed
        // Code for showing salary info on the table
        
        
        DefaultTableModel table = (DefaultTableModel) TBLSalary.getModel();
        PreparedStatement ps;
        ResultSet rs ;
        table.setRowCount(0);
        String querry = "SELECT a.empID, a.emp_name, b.Total_work_hrs,b.Total_salary FROM employee a ,salary_report b WHERE a.empID = b.emp_ID ORDER BY empID ";
        try {
            ps = dbcon.Database_connection().prepareStatement(querry);
            rs = ps.executeQuery();
            
                
            while(rs.next())
            {
                int eID = rs.getInt("empID");
                String empname = rs.getString("emp_name");
                int work = rs.getInt("Total_work_hrs");
                float sal = rs.getFloat("Total_salary");
                
                table.addRow(new Object[]{eID,empname,work,sal});
                
            }
            
   
            
            
            
        } catch (SQLException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,ex);
        }
        
        
        
    }//GEN-LAST:event_jButton31ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Add a Sales record  
         if(!"".equals(txtSitemID.getText()) && !"".equals(txtSQuantity.getText()) && !"".equals(txtSstallID.getText()) && !"".equals(txtSStockID.getText()))
         {
             int itemID = Integer.parseInt(txtSitemID.getText());
             int reqquantity = Integer.parseInt(txtSQuantity.getText());
             int stallID = Integer.parseInt(txtSstallID.getText());
             int stockID = Integer.parseInt(txtSStockID.getText());
             
             PreparedStatement ps,ps2;
             ResultSet rs;
             String checkquerry1 ="SELECT `itemID` FROM `items` WHERE `itemID`="+itemID+";";
             String checkquerry2 ="SELECT `stallID` FROM `sub_stalls` WHERE `stallID`="+stallID+";";
             String checkquerry3 ="SELECT `stockID` FROM `stock` WHERE `stockID`="+stockID+";";
             
             try {
                    ps = dbcon.Database_connection().prepareStatement(checkquerry1);
                    rs = ps.executeQuery();
                    if(rs.next())
                    {
                        ps = dbcon.Database_connection().prepareStatement(checkquerry2);
                        rs = ps.executeQuery();
                        if(rs.next())
                        {
                            ps = dbcon.Database_connection().prepareStatement(checkquerry3);
                            rs = ps.executeQuery();
                            if(rs.next())
                            {
                                String querry ="SELECT a.itemID ,b.stockID, b.price, b.quantity,b.cost FROM items a, stock b WHERE a.itemID="+itemID+" AND a.itemID=b.ItemID Having b.stockID="+stockID+";";
                                ps = dbcon.Database_connection().prepareStatement(querry);
                                rs = ps.executeQuery();
                                if(rs.next())
                                {
                                    float price = rs.getFloat("price");
                                    float cost = rs.getFloat("cost");
                                    int availablequantity = rs.getInt("quantity");
                                    
                                    if(availablequantity>= reqquantity)
                                    {
                                        float exrev =0;
                                        
                                        String querry2 ="SELECT `stallID`,`revenue` FROM `sub_stalls` WHERE `stallID`="+stallID+";";
                                        ps = dbcon.Database_connection().prepareStatement(querry2);
                                        rs = ps.executeQuery();
                                        while(rs.next())
                                        {
                                            exrev = rs.getFloat("revenue");
                                        }
                                        int remQ =availablequantity- reqquantity;
                                        float totcost=cost*reqquantity;
                                        float totprice=price*reqquantity;
                                        float exprof =totprice - totcost ;
                                        
                                        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");  
                                        LocalDateTime now = LocalDateTime.now();
                                        String day = dtf.format(now);
                                        
                                        exrev= exrev+totprice; 
                                        
                                        String querry3 ="UPDATE `sub_stalls` SET `revenue`="+exrev+" WHERE `stallID`="+stallID+";";
                                        ps = dbcon.Database_connection().prepareStatement(querry3);
                                        ps.execute();
                                        
                                        String querry4 ="INSERT INTO `sales_report` (`SRID`, `sub_stall`, `itemID`, `date`, `profit`, `Cost`, `exrevenue`) VALUES (NULL,?,?,?,?,?,?);";
                                        ps2 = dbcon.Database_connection().prepareStatement(querry4);
                                        ps2.setInt(1,stallID);
                                        ps2.setInt(2,itemID);
                                        ps2.setString(3,day);
                                        ps2.setFloat(4,exprof);
                                        ps2.setFloat(5,totcost);
                                        ps2.setFloat(6,totprice);
                                        ps2.execute();
                                        
                                        if(remQ==0)
                                        {
                                            String querry5 ="DELETE FROM `stock` WHERE `stockID`="+stockID+";";
                                            ps = dbcon.Database_connection().prepareStatement(querry5);
                                            ps.execute();
                                           
                                        }
                                        else
                                        {
                                            String querry5 ="UPDATE `stock` SET `quantity`="+remQ+" WHERE `stockID`="+stockID+";";
                                            ps = dbcon.Database_connection().prepareStatement(querry5);
                                            ps.execute();
                                        }
                                        JOptionPane.showMessageDialog(this,"Item Added to sales records");
                                        txtSitemID.setText("");
                                        txtSQuantity.setText("");
                                        txtSstallID.setText("");
                                        txtSStockID.setText("");
                                        
                                        
                                    }
                                    else
                                    {
                                        JOptionPane.showMessageDialog(this,"Only "+availablequantity+" items are Available in the stock");
                                        txtSQuantity.setText("");
                                    }
                                    
                                    
                                }
                                else
                                {
                                    JOptionPane.showMessageDialog(this,"ID mismatch .. please check the Item ID and Stock ID");
                                }
                                
                                
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(this,"stock not Found");
                            }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this,"Stall not Found");
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this,"Item not Found");
                    }
                  
                  
                  
                  
             } catch (SQLException ex) {
                 Logger.getLogger(main_GUI.class.getName()).log(Level.SEVERE, null, ex);
                 JOptionPane.showMessageDialog(this,ex);
             }
           
             
             
             
             
             
         }
         else
         {
             JOptionPane.showMessageDialog(this,"Please enter details in the required fields");
         }
        
        
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        // Add the ravenue came from each sub stall at the end of the day
        if(!"".equals(txtEarnings.getText()) && !"".equals(txtrevStallID.getText()))
        {
           float earnings = Float.parseFloat(txtEarnings.getText());
           int stallID = Integer.parseInt(txtrevStallID.getText());
           
           PreparedStatement ps;
           ResultSet rs;
           String querry ="SELECT `sub_stall` FROM `sales_report` WHERE `sub_stall`="+stallID+";";
            try {
                ps = dbcon.Database_connection().prepareStatement(querry);
                rs = ps.executeQuery();
                if(rs.next())
                {
                    float realrev=0,exrev =0;
                    String querry1 ="SELECT `stallID`,`revenue`,`real_revenue` FROM `sub_stalls` WHERE `stallID`="+stallID+"";
                    ps = dbcon.Database_connection().prepareStatement(querry1);
                    rs = ps.executeQuery();
                    while(rs.next())
                    {
                        realrev=rs.getFloat("real_revenue");   
                        exrev=rs.getFloat("revenue");
                    }
                    realrev = realrev + earnings;
                    
                    if(exrev>realrev)
                    {
                        float due = exrev - realrev;
                        String querry2 ="UPDATE `sub_stalls` SET `real_revenue`="+realrev+",`Due`="+due+" WHERE `stallID`="+stallID+"";
                        ps = dbcon.Database_connection().prepareStatement(querry2);
                        ps.execute();                        
                        
                    }
                    else
                    {
                        String querry2 ="UPDATE `sub_stalls` SET `real_revenue`="+realrev+" WHERE `stallID`="+stallID+"";
                        ps = dbcon.Database_connection().prepareStatement(querry2);
                        ps.execute(); 
                    }
                    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");  
                    LocalDateTime now = LocalDateTime.now();
                    String day = dtf.format(now);
                    
                    String querry3 ="INSERT INTO `dayrev`(`dayendID`,`stallID`, `date`, `revenue`) VALUES (NULL,"+stallID+",'"+day+"',"+earnings+");";
                    ps = dbcon.Database_connection().prepareStatement(querry3);
                    ps.execute(); 
                    JOptionPane.showMessageDialog(this,"Revenue added");
                    txtEarnings.setText("");
                    txtrevStallID.setText("");
                    
                }
                else
                {
                    JOptionPane.showMessageDialog(this,"Stall Not found");
                }
                
                
                
            } catch (SQLException ex) {
                Logger.getLogger(main_GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
           
           
           
            
            
        }
        else
        {
            JOptionPane.showMessageDialog(this,"Please enter details in the required fields");
        }
        
        
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        //  code to display today's sales report
        PreparedStatement ps;
        ResultSet rs;
        float cost=0,rev=0;  
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");  
        LocalDateTime now = LocalDateTime.now();
        String day = dtf.format(now);
        String querry ="SELECT SUM(Cost) as CFD FROM `sales_report` WHERE `date`='"+day+"'";
        String querry2 ="SELECT SUM(`revenue`) as rev FROM `dayrev` WHERE `date`='"+day+"'";
        String querry3 ="SELECT `sub_stall`, `itemID`, `date`, `Cost`, `exrevenue` FROM `sales_report` WHERE `date`='"+day+"'";
        
         
         try {
             ps = dbcon.Database_connection().prepareStatement(querry);
             rs = ps.executeQuery();
             while(rs.next())
             {
                 cost = rs.getFloat("CFD");
             }
             ps = dbcon.Database_connection().prepareStatement(querry2);
             rs = ps.executeQuery();
             while(rs.next())
             {
                 rev = rs.getFloat("rev");
             }
             float prof =rev-cost; 
             
            DefaultTableModel table = (DefaultTableModel) TBLDaySal.getModel();        
            table.setRowCount(0);
             ps = dbcon.Database_connection().prepareStatement(querry3);
             rs = ps.executeQuery();
             while(rs.next())
            {
                int itmeID = rs.getInt("itemID");
                int stallID =rs.getInt("sub_stall");
                float tblcost = rs.getFloat("Cost");
                float exrevenue =rs.getFloat("exrevenue");
                String tblday =rs.getString("date");
                
                
                table.addRow(new Object[]{itmeID,stallID,tblcost,exrevenue,tblday});
                
            }
             
            lbltotalIIncome.setText(String.valueOf(rev));
            lblProfit.setText(String.valueOf(prof));
        
         } catch (SQLException ex) {
             Logger.getLogger(main_GUI.class.getName()).log(Level.SEVERE, null, ex);
             JOptionPane.showMessageDialog(this,ex);
         }
                
        
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM");  
        LocalDateTime now = LocalDateTime.now();
        String day = dtf.format(now);
        int month = Integer.parseInt(day);
        PreparedStatement ps;
        ResultSet rs;       
        String querry ="select s2.`date` , s1.total_profit , s2.total_revenue, s1.total_expected_revenue\n" +
"                              from (\n" +
"                                   select `date`\n" +
"                                       , sum(`revenue`) as total_revenue\n" +
"                                    from dayrev\n" +
"                                   where month(date)="+month+"\n" +
"                                  group by `date`\n" +
"                                   )  as s2 \n" +
"                          left outer  join (\n" +
"                                   select `date`\n" +
"                                        , sum(profit) as total_profit\n" +
"                                , sum(exrevenue) as total_expected_revenue\n" +
"                                     from sales_report\n" +
"                              \n" +
"                                   group by `date`\n" +
"                                   ) as s1 \n" +
"                                    on s1.`date` = s2.`date`\n" +
"                                     \n" +
"                            group by s2.`date`\n" +
"                            order by s2.`date`";
        
         
         try {
             
            DefaultTableModel table = (DefaultTableModel) TBLmonthsales.getModel();        
            table.setRowCount(0);
             ps = dbcon.Database_connection().prepareStatement(querry);
            rs = ps.executeQuery();
             while(rs.next())
            {
                String date = rs.getString("date");
                float tprofit = rs.getFloat("total_profit");
                float revenue =rs.getFloat("total_revenue");
                float exrevenue =rs.getFloat("total_expected_revenue");
                
                
                
                
                table.addRow(new Object[]{date,exrevenue,revenue,tprofit});
                
            }
             
         } catch (SQLException ex) {
             Logger.getLogger(main_GUI.class.getName()).log(Level.SEVERE, null, ex);
             JOptionPane.showMessageDialog(this,ex);
         }
        
        
        
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Generate the jasper report for viewing Employees
        
        try{
            JasperDesign jasdi = JRXmlLoader.load("C:\\Users\\Lasindu Ruwin\\Documents\\NetBeansProjects\\ProjectX\\src\\Reports\\Employee.jrxml");
            String sql = "SELECT `empID`, `emp_name`, `contact`, `address`, `basic_salary`, `OT_rate`, `Leaves_amount` FROM `employee`";
            JRDesignQuery newQuery = new JRDesignQuery();
            newQuery.setText(sql);
            
            jasdi.setQuery(newQuery);
            
            JasperReport js = JasperCompileManager.compileReport(jasdi);
            JasperPrint jp = JasperFillManager.fillReport(js, null, dbcon.Database_connection());
            
            JasperViewer.viewReport(jp,false);
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this,e);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO Code for generating the jasper report for Today's Sales
    try{

            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");  
            LocalDateTime now = LocalDateTime.now();
            String day = dtf.format(now);
            String querry ="SELECT SUM(Cost) as CFD FROM `sales_report` WHERE `date`='"+day+"'";
            String querry2 ="SELECT SUM(`revenue`) as rev FROM `dayrev` WHERE `date`='"+day+"'";
            float cost=0,rev=0;
            PreparedStatement ps;
            ResultSet rs;
            ps = dbcon.Database_connection().prepareStatement(querry);
             rs = ps.executeQuery();
             while(rs.next())
             {
                 cost = rs.getFloat("CFD");
             }
             ps = dbcon.Database_connection().prepareStatement(querry2);
             rs = ps.executeQuery();
             while(rs.next())
             {
                 rev = rs.getFloat("rev");
             }
             float prof =rev-cost; 
            JasperDesign jasdi = JRXmlLoader.load("C:\\Users\\Lasindu Ruwin\\Documents\\NetBeansProjects\\ProjectX\\src\\Reports\\Today's_sales.jrxml");
            String sql = "SELECT `sub_stall`, `itemID`,`profit`, `Cost`, `exrevenue` FROM `sales_report` WHERE `date`= '"+day+"' group by sub_stall";
            JRDesignQuery newQuery = new JRDesignQuery();
            newQuery.setText(sql);
            
            
            jasdi.setQuery(newQuery);
            HashMap<String, Object> para = new HashMap<>();
            para.put("TotCost", Float.toString(cost));
            para.put("TotRev", Float.toString(rev));
            para.put("TotPorf", Float.toString(prof));
            
            JasperReport js = JasperCompileManager.compileReport(jasdi);
            JasperPrint jp = JasperFillManager.fillReport(js, para, dbcon.Database_connection());
            
            JasperViewer.viewReport(jp,false);
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this,e);
        }
        
        
        
        
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO Code for generating the jasper report for month's report
            try{

            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM");  
            LocalDateTime now = LocalDateTime.now();
            String day = dtf.format(now);
            int month = Integer.parseInt(day);
            PreparedStatement ps;
            ResultSet rs; 
            float totprof=0,totrev =0,totexrev=0;
            String sql = "select s2.`date` , s1.total_profit , s2.total_revenue, s1.total_expected_revenue\n" +
"                              from (\n" +
"                                   select `date`\n" +
"                                       , sum(`revenue`) as total_revenue\n" +
"                                    from dayrev\n" +
"                                   where month(date)="+month+"\n" +
"                                  group by `date`\n" +
"                                   )  as s2 \n" +
"                          left outer  join (\n" +
"                                   select `date`\n" +
"                                        , sum(profit) as total_profit\n" +
"                                , sum(exrevenue) as total_expected_revenue\n" +
"                                     from sales_report\n" +
"                              \n" +
"                                   group by `date`\n" +
"                                   ) as s1 \n" +
"                                    on s1.`date` = s2.`date`\n" +
"                                     \n" +
"                            group by s2.`date`\n" +
"                            order by s2.`date`";
             ps = dbcon.Database_connection().prepareStatement(sql);
             rs = ps.executeQuery();
             while(rs.next())
             {
                 totprof= totprof + rs.getFloat("total_profit");
                 totexrev = totexrev + rs.getFloat("total_expected_revenue");
                 totrev = totrev + rs.getFloat("total_revenue");
             }
            JasperDesign jasdi = JRXmlLoader.load("C:\\Users\\Lasindu Ruwin\\Documents\\NetBeansProjects\\ProjectX\\src\\Reports\\Month's.jrxml");
            
            JRDesignQuery newQuery = new JRDesignQuery();
            newQuery.setText(sql);
            
            
            jasdi.setQuery(newQuery);
            HashMap<String, Object> para = new HashMap<>();
            para.put("TotProf", Float.toString(totprof));
            para.put("TotRev", Float.toString(totrev));
            para.put("TotExRev", Float.toString(totexrev));

            JasperReport js = JasperCompileManager.compileReport(jasdi);
            JasperPrint jp = JasperFillManager.fillReport(js, para, dbcon.Database_connection());
            
            JasperViewer.viewReport(jp,false);
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this,e);
        }
    }//GEN-LAST:event_jButton13ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main_GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AdminPannelButton;
    private javax.swing.JComboBox<String> ComboBoxEmpUp;
    private javax.swing.JButton RemoveSuppbtn;
    private javax.swing.JTable TBLDaySal;
    private javax.swing.JTable TBLEMP;
    private javax.swing.JTable TBLItem_table;
    private javax.swing.JTable TBLSalary;
    private javax.swing.JTable TBLSubstall;
    private javax.swing.JTable TBLmonthsales;
    private javax.swing.JTable TBLviewSupp;
    private javax.swing.JButton btnDopayment;
    private javax.swing.JButton btnremove_employee;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton28;
    private javax.swing.JButton jButton29;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton30;
    private javax.swing.JButton jButton31;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTabbedPane jTabbedPaneInventory;
    private javax.swing.JLabel lblProfit;
    private javax.swing.JLabel lblrole;
    private javax.swing.JLabel lbltotalIIncome;
    private javax.swing.JTextField txtAamt;
    private javax.swing.JTextField txtCategory;
    private javax.swing.JTextField txtCostperitem;
    private javax.swing.JTextField txtEarnings;
    private javax.swing.JTextField txtItemName;
    private javax.swing.JTextField txtNumofDays;
    private javax.swing.JTextField txtOTHrs;
    private javax.swing.JTextField txtSQuantity;
    private javax.swing.JTextField txtSStockID;
    private javax.swing.JTextField txtSitemID;
    private javax.swing.JTextField txtSstallID;
    private javax.swing.JTextField txtStallID;
    private javax.swing.JTextField txtStallName;
    private javax.swing.JTextField txtSupID;
    private javax.swing.JTextField txtSuppID;
    private javax.swing.JTextField txtSuppName;
    private javax.swing.JTextField txtdelempID;
    private javax.swing.JTextField txtdelitem;
    private javax.swing.JTextField txtdelq;
    private javax.swing.JTextField txtdelstock;
    private javax.swing.JTextField txtdelsup;
    private javax.swing.JTextField txtempAID;
    private javax.swing.JTextField txtempAddress;
    private javax.swing.JTextField txtempContact;
    private javax.swing.JTextField txtempID;
    private javax.swing.JTextField txtempLeaveID;
    private javax.swing.JTextField txtempLeaveR;
    private javax.swing.JTextField txtempLeavsAmt;
    private javax.swing.JTextField txtempName;
    private javax.swing.JTextField txtempOTID;
    private javax.swing.JTextField txtempOTR;
    private javax.swing.JTextField txtempSal;
    private javax.swing.JTextField txtempUpVal;
    private javax.swing.JTextField txtempupID;
    private javax.swing.JTextField txtitemID;
    private javax.swing.JTextField txtitemSearch;
    private javax.swing.JTextField txtprice;
    private javax.swing.JTextField txtquantity;
    private javax.swing.JTextField txtrevStallID;
    private javax.swing.JTextField txtstockID;
    private javax.swing.JTextField txtsupIDpay;
    private javax.swing.JTextField txtsupamt;
    // End of variables declaration//GEN-END:variables
}
